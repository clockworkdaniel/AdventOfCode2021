import {
  Coordinate,
  countDots,
  dividePaper,
  Fold,
  foldPaper,
  generatePaper,
  Paper,
} from "./day13";

const testCoordinates: Coordinate[] = [
  [6, 10],
  [0, 14],
  [9, 10],
  [0, 3],
  [10, 4],
  [4, 11],
  [6, 0],
  [6, 12],
  [4, 1],
  [0, 13],
  [10, 12],
  [3, 4],
  [3, 0],
  [8, 4],
  [1, 10],
  [2, 14],
  [8, 10],
  [9, 0],
];

const testFolds: Fold[] = [
  ["y", 7],
  ["x", 5],
];

const paper: Paper = [
  [".", ".", ".", "#", ".", ".", "#", ".", ".", "#", "."],
  [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", "#", ".", ".", ".", ".", "#", ".", "#"],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", "#", ".", ".", ".", ".", "#", ".", "#", "#", "."],
  [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"],
  ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  ["#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."],
];

const paperAfterFold1: Paper = [
  ["#", ".", "#", "#", ".", ".", "#", ".", ".", "#", "."],
  ["#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"],
  ["#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
  [".", "#", ".", "#", ".", ".", "#", ".", "#", "#", "#"],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
];

test("generatePaper", () => {
  expect(generatePaper(testCoordinates)).toEqual(paper);
});

test("dividePaper", () => {
  expect(dividePaper(testFolds[0], paper)).toEqual([
    [
      [".", ".", ".", "#", ".", ".", "#", ".", ".", "#", "."],
      [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", "#", ".", ".", ".", ".", "#", ".", "#"],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    ],
    [
      [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", "#", ".", ".", ".", ".", "#", ".", "#", "#", "."],
      [".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"],
      ["#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      ["#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."],
    ],
  ]);

  expect(dividePaper(testFolds[1], paperAfterFold1)).toEqual([
    [
      ["#", ".", "#", "#", "."],
      ["#", ".", ".", ".", "#"],
      [".", ".", ".", ".", "."],
      ["#", ".", ".", ".", "#"],
      [".", "#", ".", "#", "."],
      [".", ".", ".", ".", "."],
      [".", ".", ".", ".", "."],
    ],
    [
      ["#", ".", ".", "#", "."],
      [".", ".", ".", ".", "."],
      ["#", ".", ".", ".", "#"],
      [".", ".", ".", ".", "."],
      ["#", ".", "#", "#", "#"],
      [".", ".", ".", ".", "."],
      [".", ".", ".", ".", "."],
    ],
  ]);
});

test("foldPaper", () => {
  expect(foldPaper(testFolds[0], paper)).toEqual(paperAfterFold1);

  expect(foldPaper(testFolds[1], paperAfterFold1)).toEqual([
    ["#", "#", "#", "#", "#"],
    ["#", ".", ".", ".", "#"],
    ["#", ".", ".", ".", "#"],
    ["#", ".", ".", ".", "#"],
    ["#", "#", "#", "#", "#"],
    [".", ".", ".", ".", "."],
    [".", ".", ".", ".", "."],
  ]);
});

test("countDots", () => {
  expect(countDots(foldPaper(testFolds[0], paper))).toBe(17);
  expect(countDots(foldPaper(testFolds[1], paperAfterFold1))).toBe(16);
});
